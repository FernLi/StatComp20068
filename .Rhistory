u1=2*runif(n)-1;u2=2*runif(n)-1;u3=2*runif(n)-1;
x=vector();
for (i in 1:n){
if (abs(u3[i])>abs(u2[i]) && abs(u3[i])>abs(u1[i])){
x[i]=u2[i]
}else
x[i]=u3[i]
}
hist(x,prob=TRUE,main = expression(f(x)==3/4*(1-x^2)))
y=seq(-1,1,0.01)
lines(y,3/4*(1-y^2))
F=-0.25*y^3+0.75*y+0.5
ks.test(x,F)
set.seed(70)
n=1000
u=runif(n)
x=2/((1-u)^(1/4))-2  #F(x)=1-(2/x)^2 ,x>=b>0,a>0
hist(x,prob=TRUE,main = expression(f(x)==64*(2+x)^{-5}))
y=seq(0,max(x),0.01)
lines(y,64*(2+y)^{-5})
set.seed(66)
number=1000000
exact_value=1/2
u=runif(number,min = 0,max = pi/3)
MC_value=pi/3*mean(sin(u))
print(c(MC_value,exact_value,abs(MC_value-exact_value)))
set.seed(66)
number=100000
exact_value=exp(1)-1
n=1000
MC_value1=vector()
MC_value2=vector()
for (i in 1:n){
u1=runif(number)
u2=runif(number)
MC_value1[i]=1/2*mean(exp(u1)+exp(1-u1))
MC_value2[i]=mean((exp(u1)+exp(u2))/2)
}
set.seed(66)
number=1000
exact_value=exp(1)-1
n=1000
MC_value1=vector()
MC_value2=vector()
for (i in 1:n){
u1=runif(number)
u2=runif(number)
MC_value1[i]=1/2*mean(exp(u1)+exp(1-u1))
MC_value2[i]=mean((exp(u1)+exp(u2))/2)
}
sd1=sd(MC_value1)
sd2=sd(MC_value2)
print(c(exact_value,mean(MC_value1),mean(MC_value2),sd1,sd2))
print(1-var(MC_value1)/var(MC_value2))
set.seed(66)
number=1000
exact_value=exp(1)-1
n=1000
MC_value1=vector()
MC_value2=vector()
for (i in 1:n){
u1=runif(number)
u2=runif(number)
MC_value1[i]=1/2*mean(exp(u1)+exp(1-u1))
MC_value2[i]=mean((exp(u1)+exp(u2))/2)
}
sd1=sd(MC_value1)
sd2=sd(MC_value2)
print(c(exact_value,mean(MC_value1),mean(MC_value2),sd1,sd2))
set.seed(0)
m=10000
theta.hat=var.hat=numeric(2)
g=function(x){
(x^2*exp(-x^2/2)/sqrt(2*pi))*(x>1)
}
u=runif(m)                    ##inverse transform method
x=sqrt(1-2*log(1-u))
fg1=g(x)/(exp(1/2-x^2/2)*x)
theta.hat[1]=mean(fg1)
var.hat[1]=var(fg1)
x=rexp(m,1)
fg2=g(x)/(exp(-x))
theta.hat[2]=mean(fg2)
var.hat[2]=var(fg2)
print(rbind(theta.hat,var.hat))
set.seed(0)
m=100;k=5;r=m/k;n=50;t2=numeric(k)
estimates=matrix(0,n,2)
g=function(x){exp(-x)/(1+x^2)*(x>0)*(x<1)}
f=function(x){exp(-x)/(exp((1-j)/5)-exp(-j/5))}
for (i in 1:n){
estimates[i,1]=mean(g(runif(m)))
for ( j in 1:k){
u=runif(m/k)
x=-log(exp(-(j-1)/5)-u*(exp((1-j)/5)-exp(-j/5)))
t2[j]=mean(g(x)/f(x))
}
estimates[i,2]=sum(t2)
}
apply(estimates,2,mean)
apply(estimates,2,var)
set.seed(0)
n=20
alpha=0.05
u=0;sigma=1;
number=100000
Icl=vector();ucl=vector();
for (i in 1:number){
x=rnorm(n,mean = u,sd=sigma)
s=sqrt(var(x)*n/(n-1))
ucl[i]=mean(x)+s/sqrt(n)*qt(1-alpha/2,n-1)
Icl[i]=mean(x)-s/sqrt(n)*qt(1-alpha/2,n-1)
}
Icl1=mean(Icl);ucl1=mean(ucl)
a=0;
for (i in 1:number){
if (Icl[i]<0&&ucl[i]>0)a=a+1
else a=a
}
p=a/number
print(c(Icl1,ucl1))
print(p)
set.seed(0)
n=20;alpha=0.05;number=100000;
Icl=vector();ucl=vector();
for (i in 1:number){
x=rchisq(n,df=2)
s=sqrt(var(x)*n/(n-1))
ucl[i]=mean(x)+s/sqrt(n)*qt(1-alpha/2,n-1)
Icl[i]=mean(x)-s/sqrt(n)*qt(1-alpha/2,n-1)
}
Icl1=mean(Icl);ucl1=mean(ucl)
a=0;
for (i in 1:number){
if (Icl[i]<2&&ucl[i]>2)a=a+1
else a=a
}
p=a/number
print(c(Icl1,ucl1))
print(p)
set.seed(0)
n=20;alpha=0.05;number=1000;
Icl=vector();ucl=vector();
for (i in 1:number){
x=rchisq(n,df=2)
s=sqrt(var(x)*n/(n-1))
ucl[i]=mean(x)+s/sqrt(n)*qt(1-alpha/2,n-1)
Icl[i]=mean(x)-s/sqrt(n)*qt(1-alpha/2,n-1)
}
Icl1=mean(Icl);ucl1=mean(ucl)
a=0;
for (i in 1:number){
if (Icl[i]<2&&ucl[i]>2)a=a+1
else a=a
}
p=a/number
print(c(Icl1,ucl1))
print(p)
set.seed(0)
alpha=0.05
n=100
m=10000
a=c(seq(1,500,20))
N=length(a)
pwr=numeric(N);pwr1=numeric(N)
cv=qnorm(1-alpha/2,0,sqrt(6*(n-2)/((n+1)*(n+3))))
sk=function(x){
xbar=mean(x)
m3=mean((x-xbar)^3)
m2=mean((x-xbar)^2)
return(m3/m2^1.5)
}
for (i in 1:N){
a1=a[i]
sktests=numeric(m)
t_value=numeric(m)
for (j in 1:m){
x=rbeta(n,shape1 = a1,shape2 = a1)
y=rt(n,a1)
sktests[j]=as.integer(abs(sk(x))>=cv)
t_value[j]=as.integer(abs(sk(y))>=cv)
}
pwr[i]=mean(sktests)
pwr1[i]=mean(t_value)
}
plot(a,pwr,type="b",xlab = bquote(a),ylim = c(0,1),col="blue")
abline(h=0.05,lty=3)
lines(a,pwr1,col="red")
se=sqrt(pwr*(1-pwr)/m)
lines(a,pwr+se,lty=3)
lines(a,pwr-se,lty=3)
set.seed(0)
alpha=0.05
n=100
m=1000
a=c(seq(1,500,20))
N=length(a)
pwr=numeric(N);pwr1=numeric(N)
cv=qnorm(1-alpha/2,0,sqrt(6*(n-2)/((n+1)*(n+3))))
sk=function(x){
xbar=mean(x)
m3=mean((x-xbar)^3)
m2=mean((x-xbar)^2)
return(m3/m2^1.5)
}
for (i in 1:N){
a1=a[i]
sktests=numeric(m)
t_value=numeric(m)
for (j in 1:m){
x=rbeta(n,shape1 = a1,shape2 = a1)
y=rt(n,a1)
sktests[j]=as.integer(abs(sk(x))>=cv)
t_value[j]=as.integer(abs(sk(y))>=cv)
}
pwr[i]=mean(sktests)
pwr1[i]=mean(t_value)
}
plot(a,pwr,type="b",xlab = bquote(a),ylim = c(0,1),col="blue")
abline(h=0.05,lty=3)
lines(a,pwr1,col="red")
se=sqrt(pwr*(1-pwr)/m)
lines(a,pwr+se,lty=3)
lines(a,pwr-se,lty=3)
set.seed(0)
m=1000;alpha=0.055;
sigma1=1;sigma2=1.5
number1=numeric(m);number2=numeric(m)
pwr1=numeric(3);pwr2=numeric(3)
count5test=function(x,y){
x=x-mean(x)
y=y-mean(y)
outx=sum(x>max(y))+sum(x<min(y))
outy=sum(y>max(x))+sum(y<min(x))
return(as.integer(max(c(outx,outy))>=5))
}
a=c(10,100,2000)
for (i in 1:3){
n1=a[i];n2=a[i];
for (j in 1:m){
x=rnorm(n1,0,sqrt(sigma1))
y=rnorm(n2,0,sqrt(sigma2))
s1=var(x)
s2=var(y)
F_value=s1/s2
number1[j]=count5test(x,y)
number2[j]=as.integer(F_value>qf(1-alpha/2,n1-1,n2-1)||F_value<qf(alpha/2,n1-1,n2-1))
}
pwr1[i]=mean(number1)
pwr2[i]=mean(number2)
}
print(cbind(pwr1,pwr2))
library(MASS)
sk = function(x){
n = nrow(x)
xbar = colMeans(x)
sig.inv = solve(cov(x)*(n-1)/n)
b = 0
for (i in 1:n) {
for (j in 1:n) {
b = b+(t(x[i,]-xbar)%*%sig.inv%*%(x[j,]-xbar))^3
}
}
return(b/(n^2))
}
set.seed(12345)
n = c(10,20,30,50,100,500);m = 100;d = 2;
sigma = matrix(c(1,0,0,1),nrow=d)
alpha = 0.05
cv = cbind((6/n)*qchisq(alpha/2,d*(d+1)*(d+2)/6),(6/n)*qchisq((1-alpha/2),d*(d+1)*(d+2)/6))
pwr = numeric()
for (i in 1:length(n)) {
msktests = numeric()
for (j in 1:m) {
x = mvrnorm(n[i],rep(0,2),sigma)
t = sk(x)
msktests[j] = as.integer(t<=cv[i,1] || t>=cv[i,2])
}
pwr[i]= mean(msktests)
}
print(pwr)
set.seed(0)
alpha=0.05
n=100
m=1000
a=c(seq(1,500,20))
N=length(a)
pwr=numeric(N);pwr1=numeric(N)
cv=qnorm(1-alpha/2,0,sqrt(6*(n-2)/((n+1)*(n+3))))
sk=function(x){
xbar=mean(x)
m3=mean((x-xbar)^3)
m2=mean((x-xbar)^2)
return(m3/m2^1.5)
}
for (i in 1:N){
a1=a[i]
sktests=numeric(m)
t_value=numeric(m)
for (j in 1:m){
x=rbeta(n,shape1 = a1,shape2 = a1)
y=rt(n,a1)
sktests[j]=as.integer(abs(sk(x))>=cv)
t_value[j]=as.integer(abs(sk(y))>=cv)
}
pwr[i]=mean(sktests)
pwr1[i]=mean(t_value)
}
plot(a,pwr,type="b",xlab = bquote(a),ylim = c(0,1),col="blue")
abline(h=0.05,lty=3)
lines(a,pwr1,col="red")
se=sqrt(pwr*(1-pwr)/m)
lines(a,pwr+se,lty=3)
lines(a,pwr-se,lty=3)
set.seed(0)
m=1000;alpha=0.055;
sigma1=1;sigma2=1.5
number1=numeric(m);number2=numeric(m)
pwr1=numeric(3);pwr2=numeric(3)
count5test=function(x,y){
x=x-mean(x)
y=y-mean(y)
outx=sum(x>max(y))+sum(x<min(y))
outy=sum(y>max(x))+sum(y<min(x))
return(as.integer(max(c(outx,outy))>=5))
}
a=c(10,100,2000)
for (i in 1:3){
n1=a[i];n2=a[i];
for (j in 1:m){
x=rnorm(n1,0,sqrt(sigma1))
y=rnorm(n2,0,sqrt(sigma2))
s1=var(x)
s2=var(y)
F_value=s1/s2
number1[j]=count5test(x,y)
number2[j]=as.integer(F_value>qf(1-alpha/2,n1-1,n2-1)||F_value<qf(alpha/2,n1-1,n2-1))
}
pwr1[i]=mean(number1)
pwr2[i]=mean(number2)
}
print(cbind(pwr1,pwr2))
set.seed(12345)
sk = function(x) {
xbar = mean(x)
m3 = mean((x - xbar)^3)
m2 = mean((x - xbar)^2)
return( m3 / m2^1.5 )
}
# beta(a,a)
pwr_beta = function(a){
alpha = 0.1
n = 20
m = 1e4
N = length(a)
pwr = numeric(N)
cv = qnorm(1-alpha/2, 0, sqrt(6*(n-2) / ((n+1)*(n+3))))
for (j in 1:N) {
sktests = numeric(m)
for (i in 1:m) {
x = rbeta(n, a[j], a[j])
sktests[i] = as.integer(abs(sk(x))>= cv)
}
pwr[j] = mean(sktests)
}
se = sqrt(pwr * (1-pwr) / m)
return(list(pwr = pwr,se = se))
}
a = c(seq(0,1,0.1),seq(1,20,1),seq(20,100,10))
pwr = pwr_beta(a)$pwr
# plot the power
se = pwr_beta(a)$se
plot(a, pwr, type = "b", xlab = "a", ylab = "pwr", pch=16)
abline(h = 0.1, lty = 2)
lines(a, pwr+se, lty = 4)
lines(a, pwr-se, lty = 4)
set.seed(0)
m=1000;alpha=0.055;
sigma1=1;sigma2=1.5
number1=numeric(m);number2=numeric(m)
pwr1=numeric(3);pwr2=numeric(3)
count5test=function(x,y){
x=x-mean(x)
y=y-mean(y)
outx=sum(x>max(y))+sum(x<min(y))
outy=sum(y>max(x))+sum(y<min(x))
return(as.integer(max(c(outx,outy))>=5))
}
a=c(10,100,2000)
for (i in 1:3){
n1=a[i];n2=a[i];
for (j in 1:m){
x=rnorm(n1,0,sqrt(sigma1))
y=rnorm(n2,0,sqrt(sigma2))
s1=var(x)
s2=var(y)
F_value=s1/s2
number1[j]=count5test(x,y)
number2[j]=as.integer(F_value>qf(1-alpha/2,n1-1,n2-1)||F_value<qf(alpha/2,n1-1,n2-1))
}
pwr1[i]=mean(number1)
pwr2[i]=mean(number2)
}
print(cbind(pwr1,pwr2))
library(MASS)
Mardia<-function(mydata){
n=nrow(mydata)
c=ncol(mydata)
central<-mydata
for(i in 1:c){
central[,i]<-mydata[,i]-mean(mydata[,i])
}
sigmah<-t(central)%*%central/n
a<-central%*%solve(sigmah)%*%t(central)
b<-sum(colSums(a^{3}))/(n*n)
test<-n*b/6
chi<-qchisq(0.95,c*(c+1)*(c+2)/6)
as.integer(test>chi)
}
set.seed(1234)
mu <- c(0,0,0)
sigma <- matrix(c(1,0,0,0,1,0,0,0,1),nrow=3,ncol=3)
m=1000
n<-c(10, 20, 30, 50, 100, 500)
#m: number of replicates; n: sample size
a=numeric(length(n))
for(i in 1:length(n)){
a[i]=mean(replicate(m, expr={
mydata <- mvrnorm(n[i],mu,sigma)
Mardia(mydata)
}))
}
library(MASS)
Mardia<-function(mydata){
n=nrow(mydata)
c=ncol(mydata)
central<-mydata
for(i in 1:c){
central[,i]<-mydata[,i]-mean(mydata[,i])
}
sigmah<-t(central)%*%central/n
a<-central%*%solve(sigmah)%*%t(central)
b<-sum(colSums(a^{3}))/(n*n)
test<-n*b/6
chi<-qchisq(0.95,c*(c+1)*(c+2)/6)
as.integer(test>chi)
}
set.seed(1234)
mu <- c(0,0,0)
sigma <- matrix(c(1,0,0,0,1,0,0,0,1),nrow=3,ncol=3)
m=1000
n<-c(10, 20, 30, 50, 100, 500)
#m: number of replicates; n: sample size
a=numeric(length(n))
for(i in 1:length(n)){
a[i]=mean(replicate(m, expr={
mydata <- mvrnorm(n[i],mu,sigma)
Mardia(mydata)
}))
}
print(a)
library(MASS)
set.seed(7912)
set.seed(7912)
mu1 <- mu2 <- c(0,0,0)
sigma1 <- matrix(c(1,0,0,0,1,0,0,0,1),nrow=3,ncol=3)
sigma2 <- matrix(c(100,0,0,0,100,0,0,0,100),nrow=3,ncol=3)
sigma=list(sigma1,sigma2)
m=1000
n=50
#m: number of replicates; n: sample size
epsilon <- c(seq(0, .06, .01), seq(.1, 1, .05))
N <- length(epsilon)
pwr <- numeric(N)
for (j in 1:N) { #for each epsilon
e <- epsilon[j]
sktests <- numeric(m)
for (i in 1:m) { #for each replicate
index=sample(c(1, 2), replace = TRUE, size = n, prob = c(1-e, e))
mydata<-matrix(0,nrow=n,ncol=3)
for(t in 1:n){
if(index[t]==1) mydata[t,]=mvrnorm(1,mu1,sigma1)
else mydata[t,]=mvrnorm(1,mu2,sigma2)
}
sktests[i] <- Mardia(mydata)
}
pwr[j] <- mean(sktests)
}
devtools::build()
devtools::document()
devtools::load_all(".")
devtools::load_all(".")
devtools::document()
devtools::build()
ctl <- c(4.17,5.58,5.18,6.11,4.50,4.61,5.17,4.53,5.33,5.14)
trt <- c(4.81,4.17,4.41,3.59,5.87,3.83,6.03,4.89,4.32,4.69)
group <- gl(2, 10, 20, labels = c("Ctl","Trt"))
weight <- c(ctl, trt)
lm.D9 <- lm(weight ~ group)
plot(lm.D9)
devtools::build()
devtools::load_all(".")
library(StatComp20068)
?`StatComp20068-package`
devtools::document()
library(StatComp20068)
devtools::build()
library(StatComp20068)
devtools::build()
devtools::build_vignettes()
devtools::build_vignettes()
library(StatComp20068)
